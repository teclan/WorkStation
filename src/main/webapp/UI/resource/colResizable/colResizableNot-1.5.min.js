// colResizable 1.5 - a jQuery plugin by Alvaro Prieto Lauroba http://www.bacubacu.com/colresizable/
(function ($) {
    var d = $(document),
h = $("head"),
drag = null,
tables = [],
count = 0,
ID = "id",
PX = "px",
SIGNATURE = "JColResizerNot",
FLEX = "JCLRFlexNot",
I = parseInt,
M = Math,
ie = navigator.userAgent.indexOf('Trident/4.0') > 0,
S;
    try { S = sessionStorage }
    catch (e) { };
    h.append("<style type='text/css'>  .JColResizerNot{table-layout:fixed;} "
    + ".JColResizerNot td, .JColResizerNot th{overflow:hidden;padding-left:0!important; padding-right:0!important;}"
    + "  .JCLRgripsNot{ height:0px; position:relative;}"
    + " .JCLRgripNot{margin-left:-5px; position:absolute; z-index:5;}"
    + " .JCLRgripNot .JColResizerNot{position:absolute;background-color:red;filter:alpha(opacity=1);opacity:0;width:1px;height:100%;top:0px;}"
    + " .JCLRLastGripNot{position:absolute; width:1px; }"
    + " .JCLRgripDragNot{ border-left:1px dotted black;	} "
    + ".JCLRFlexNot{width:auto!important;}</style>");
    var initNot = function (tb, options) {
        var t = $(tb);
        t.opt = options;
        if (t.opt.disable)
            return
        destroyNot(t);
        var id = t.id = t.attr(ID) || SIGNATURE + count++;
        t.p = t.opt.postbackSafe;
        if (!t.is("table") || tables[id] && !t.opt.partialRefresh)
            return;
        t.addClass(SIGNATURE).attr(ID, id).before('<div class="JCLRgripsNot"/>');
        t.g = [];
        t.c = [];
        t.w = t.width();
        t.gc = t.prev();
        t.f = t.opt.fixed;
        if (options.marginLeft) t.gc.css("marginLeft", options.marginLeft);
        if (options.marginRight) t.gc.css("marginRight", options.marginRight);
        t.cs = I(ie ? tb.cellSpacing || tb.currentStyle.borderSpacing : t.css('border-spacing')) || 2;
        t.b = I(ie ? tb.border || tb.currentStyle.borderLeftWidth : t.css('border-left-width')) || 1; tables[id] = t;
        createGripsNot(t)
    },
destroyNot = function (t) {
    var id = t.attr(ID),
t = tables[id];
    if (!t || !t.is("table")) return; t.removeClass(SIGNATURE + " " + FLEX).gc.remove();
    delete tables[id]
},
createGripsNot = function (t) {
    var th = t.find(">thead>tr>th,>thead>tr>td");
    if (!th.length) th = t.find(">tbody>tr:first>th,>tr:first>th,>tbody>tr:first>td, >tr:first>td");
    th = th.filter(":visible");
    t.cg = t.find("col");
    t.ln = th.length; if (t.p && S && S[t.id]) memento(t, th);
    th.each(function (i) {
        var c = $(this),
g = $(t.gc.append('<div class="JCLRgripNot"></div>')[0].lastChild);
        g.append(t.opt.gripInnerHtml).append('<div class="' + SIGNATURE + '"></div>');
        if (i == t.ln - 1) {
            g.addClass("JCLRLastGrip");
            if (t.f) g.html("")
        };
        g.bind('touchstart mousedown', onGripMouseDown);
        g.t = t;
        g.i = i;
        g.c = c;
        c.w = c.width();
        t.g.push(g);
        t.c.push(c);
        c.width(c.w).removeAttr("width");
        g.data(SIGNATURE, { i: i, t: t.attr(ID), last: i == t.ln - 1 })
    });
    t.cg.removeAttr("width");
    syncGripsNot(t);
    t.find('td, th').not(th).not('table th, table td').each(function () {
        $(this).removeAttr('width')
    });
    if (!t.f)
        t.removeAttr('width').addClass(FLEX)
},
mementoNot = function (t, th) {
    var w,
m = 0,
i = 0,
aux = [],
tw;
    if (th) {
        t.cg.removeAttr("width");
        if (t.opt.flush) {
            S[t.id] = "";
            return
        };
        w = S[t.id].split(";");
        tw = w[t.ln + 1];
        if (!t.f && tw) t.width(tw);
        for (; i < t.ln; i++) {
            aux.push(100 * w[i] / w[t.ln] + "%");
            th.eq(i).css("width", aux[i])
        };
        for (i = 0; i < t.ln; i++)
            t.cg.eq(i).css("width", aux[i])
    }
    else {
        S[t.id] = "";
        for (; i < t.c.length; i++) {
            w = t.c[i].width();
            S[t.id] += w + ";";
            m += w
        };
        S[t.id] += m;
        if (!t.f)
            S[t.id] += ";" + t.width()
    }
}
, syncGripsNot = function (t) {
    t.gc.width(t.w);
    for (var i = 0; i < t.ln; i++) {
        var c = t.c[i];
        t.g[i].css({
            left: c.offset().left - t.offset().left + c.outerWidth(false) + t.cs / 2 + PX,
            height: t.opt.headerOnly ? t.c[0].outerHeight(false) : t.outerHeight(false)
        })
    }
},
syncColsNot = function (t, i, isOver) {
},
applyBoundsNot = function (t) {
    var w = $.map(t.c, function (c) { return c.width() });
    t.width(t.width()).removeClass(FLEX);
    $.each(t.c, function (i, c) { c.width(w[i]).w = w[i] });
    t.addClass(FLEX)
},
onGripDragNot = function (e) {
},
onGripDragOverNot = function (e) {
},
onGripMouseDown = function (e) {
},
onResizeNot = function () {
};
    $(window).bind('resize.' + SIGNATURE, onResizeNot);
    $.fn.extend({
        colResizableNot: function (options) {
            var defaults = {
                draggingClass: 'JCLRgripDrag', //�϶�div��ʽ
                gripInnerHtml: '', //�϶�div
                liveDrag: false, //�Ƿ�ʵʱ�϶�
                fixed: true,
                minWidth: 0, //��С���
                headerOnly: false, //�϶�ʱֻ��
                postbackSafe: false, //�ط�
                flush: false, //
                marginLeft: null,
                marginRight: null,
                disable: false,
                partialRefresh: false,
                onDrag: null,
                onResize: null,
                followCol:null
            },
options = $.extend(defaults, options);
            return this.each(function () {
                initNot(this, options)
            })
        }
    })
})
(jQuery)